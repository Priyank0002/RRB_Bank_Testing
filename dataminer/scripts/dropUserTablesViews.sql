-- drops all tables and views in all accounts (except SYS and ODMRSYS) that are prefixed with ODMR$ in their name
-- Parameters:
-- 1. Action Flags:
--    R = report only, do not drop any objects
--    D = drop only, displays drop command only
--    DR or RD = drop and report
-- Note: This is a interim implementation. A change will be made to retrieve the list of
-- ODMR$ objects from the ODMr Repository (ODMRSYS) to insure only objects generated by
-- ODMr are dropped.
-- Example:
-- @dropUserTablesViews.sql DR
set serveroutput on
set verify off
DECLARE
w_owner varchar2(30); 
w_object varchar2(30);
w_object_type varchar2(30);
action varchar2(30) := '&1';
report BOOLEAN := TRUE;
droptable BOOLEAN := TRUE; 
countObjects integer := 0;
countObjectsDropped integer := 0;
countObjectsFailedToDrop integer := 0;
sql_text varchar2(256);
Dynamic_Cursor integer; 
dummy integer; 
v_err_msg  VARCHAR2(4000);
purgeOption VARCHAR2(10);

cursor table_view_cursor is
select owner, object_name, object_type from 
(select owner, table_name as object_name, 'TABLE' as object_type from all_tables 
 UNION ALL
 select owner, view_name as object_name, 'VIEW' as object_type from all_views)
where object_name like 'ODMR$%' 
AND owner not in ('SYS','ODMRSYS')
order by owner, object_type, object_name;

BEGIN
 DBMS_OUTPUT.ENABLE(NULL);
  CASE action
    WHEN 'R' THEN report := TRUE;
    WHEN 'DR' THEN report := TRUE;
    WHEN 'RD' THEN report := TRUE;
    ELSE report := FALSE;
  END CASE;

  CASE action
    WHEN 'D' THEN droptable := TRUE;
    WHEN 'DR' THEN droptable := TRUE;
    WHEN 'RD' THEN droptable := TRUE;
    ELSE droptable := FALSE;
  END CASE;


open table_view_cursor;
fetch table_view_cursor into w_owner,w_object,w_object_type;
while table_view_cursor%FOUND loop
  IF report  THEN
      DBMS_OUTPUT.PUT_LINE
       ('Owner.Object: ' || '"' || w_owner || '"."' ||
        w_object || '"  Object Type: ' || w_object_type );
  END IF;

BEGIN
   IF droptable  THEN
        if w_object_type = 'TABLE' THEN purgeOption := 'PURGE';
        ELSE purgeOption := '';
        END IF;
        sql_text := 'drop ' || w_object_type || ' '  || '"' || w_owner || '"."' ||
            w_object || '" ' || purgeOption ;
        DBMS_OUTPUT.PUT_LINE
           (sql_text ); 
        Dynamic_Cursor := dbms_sql.open_cursor;
        dbms_sql.parse(Dynamic_Cursor, sql_text, dbms_sql.native);
        dummy := dbms_sql.execute(Dynamic_Cursor);
        dbms_sql.close_cursor(Dynamic_Cursor);
        countObjectsDropped := countObjectsDropped + 1;      
   END IF;
EXCEPTION
WHEN OTHERS THEN
        v_err_msg := SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK(), 1, 4000);
        DBMS_OUTPUT.PUT_LINE ('Drop failed: ' || 'Owner.Object: ' || '"' || w_owner || '"."' ||
        w_object || '"  Object Type: ' || w_object_type || ' Error: ' || v_err_msg );
        countObjectsFailedToDrop := countObjectsFailedToDrop + 1;
        dbms_sql.close_cursor(Dynamic_Cursor);
END;

   countObjects := countObjects + 1;
fetch table_view_cursor into w_owner,w_object,w_object_type;
end loop;
close table_view_cursor;

     DBMS_OUTPUT.PUT_LINE
       ('Total Number of Objects: ' || countObjects );  
     DBMS_OUTPUT.PUT_LINE
       ('Total Number of Objects Dropped: ' || countObjectsDropped ); 
     DBMS_OUTPUT.PUT_LINE
       ('Total Number of Objects Failed to Drop: ' || countObjectsFailedToDrop ); 
END;
/